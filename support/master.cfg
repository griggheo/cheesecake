# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory (although the filename
# can be changed with the --basedir option to 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

import os.path
from buildbot.changes.freshcvs import FreshCVSSource
from buildbot.scheduler import Scheduler, Periodic, Nightly
from buildbot.process import step, factory
from buildbot.status import html
s = factory.s

import secret

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# the 'bots' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.
c['bots'] = [("soc_x86_rh9", secret.password)]


# the 'sources' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.

c['sources'] = []

# For example, if you had CVSToys installed on your repository, and your
# CVSROOT/freshcfg file had an entry like this:
#pb = ConfigurationSet([
#    (None, None, None, PBService(userpass=('foo', 'bar'), port=4519)),
#    ])

# then you could use the following buildmaster Change Source to subscribe to
# the FreshCVS daemon and be notified on every commit:
#
#fc_source = FreshCVSSource("cvs.example.com", 4519, "foo", "bar")
#c['sources'].append(fc_source)

# or, use a PBChangeSource, and then have your repository's commit script run
# 'buildbot sendchange', or contrib/svn_buildbot.py, or
# contrib/arch_buildbot.py :
#
#from buildbot.changes.pb import PBChangeSource
#c['sources'].append(PBChangeSource())


## configure the Schedulers

c['schedulers'] = [
    Nightly("every_6_hours", ["x86_rh9_trunk"], hour=[9,15,21,3], minute=0),
    Nightly("every_6_hours+10min", ["x86_rh9_mk"], hour=[9,15,21,3], minute=10),
]


# the 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['bots']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

make_source = lambda branch: s(step.SVN, mode='update',
                baseURL='http://svn.pycheesecake.org/',
                defaultBranch=branch)

source_mk = make_source('branches/mk/')
source_trunk = make_source('trunk')

class StepBuildEggInfo(step.ShellCommand):
    name = "build egg info"
    description = ["building egg info"]
    descriptionDone = [name]

build_egg_info = s(StepBuildEggInfo, command="python setup.py egg_info")

class StepUnitTest(step.ShellCommand):
    name = "unit tests"
    description = ["running unit tests"]
    descriptionDone = [name]

unit_tests = s(StepUnitTest, command="nosetests --exe --with-doctest --doctest-tests --with-coverage --verbose --include unit")

class StepFunctionalTest(step.ShellCommand):
    name = "functional tests"
    description = ["running functional tests"]
    descriptionDone = [name]

functional_tests = s(StepFunctionalTest, command="nosetests --verbose --include functional")

class EpyDocBuild(step.ShellCommand):
    name = "documentation"
    description = ["building documentation"]
    descriptionDone = [name]

epydoc_build = lambda doc_dest: s(EpyDocBuild,
                 command="/bin/sh support/generate_docs.sh %s" % doc_dest)

class CoverageBuild(step.ShellCommand):
    name = "coverage"
    description = ["building coverage statistics"]
    descriptionDone = [name]

coverage_build = lambda doc_dest: s(CoverageBuild,
                   command="/bin/sh support/generate_coverage.sh %s" % doc_dest)

make_factory = lambda source, doc_dest: factory.BuildFactory([
                    source,
                    build_egg_info,
                    unit_tests,
                    functional_tests,
                    epydoc_build(doc_dest),
                    coverage_build(doc_dest)])

f_mk = make_factory(source_mk, "/var/www/agilistas/cheesecake/mk")
f_trunk = make_factory(source_trunk, "/var/www/agilistas/cheesecake/trunk")

c['builders'] = [
    {'name': 'x86_rh9_trunk',
    'slavename': 'soc_x86_rh9',
    'builddir': 'test-trunk',
    'factory': f_trunk
    },
    {'name':'x86_rh9_mk',
    'slavename':'soc_x86_rh9',
    'builddir':'test-mk',
    'factory':f_mk
    },
]

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)

c['slavePortnum'] = secret.port

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []
c['status'].append(html.Waterfall(http_port=8888))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
# from buildbot.status import words
# c['status'].append(words.IRC(host="irc.example.com", nick="bb",
#                              channels=["#example"]))


# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can telnet into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers.
#from buildbot.master import Manhole
#c['manhole'] = Manhole(9999, "admin", "password")

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = "Cheesecake"
c['projectURL'] = "http://pycheesecake.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://agilistas.org:8888"
